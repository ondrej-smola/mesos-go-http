// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/operator/allocator/allocator.proto

/*
	Package allocator is a generated protocol buffer package.

	It is generated from these files:
		lib/operator/allocator/allocator.proto

	It has these top-level messages:
		InverseOfferStatus
*/
package allocator

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import mesos_v1 "github.com/ondrej-smola/mesos-go-http/lib"

import github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InverseOfferStatus_Status int32

const (
	// We have not received a response yet. This is the default state before
	// receiving a response.
	InverseOfferStatus_UNKNOWN InverseOfferStatus_Status = 1
	// The framework is ok with the inverse offer. This means it will not
	// violate any SLAs and will attempt to evacuate any tasks running on the
	// agent. If the tasks are not evacuated by the framework, the operator can
	// manually shut down the slave knowing that the framework will not have
	// violated its SLAs.
	InverseOfferStatus_ACCEPT InverseOfferStatus_Status = 2
	// The framework wants to block the maintenance operation from happening. An
	// example would be that it cannot meet its SLA by losing resources.
	InverseOfferStatus_DECLINE InverseOfferStatus_Status = 3
)

var InverseOfferStatus_Status_name = map[int32]string{
	1: "UNKNOWN",
	2: "ACCEPT",
	3: "DECLINE",
}
var InverseOfferStatus_Status_value = map[string]int32{
	"UNKNOWN": 1,
	"ACCEPT":  2,
	"DECLINE": 3,
}

func (x InverseOfferStatus_Status) Enum() *InverseOfferStatus_Status {
	p := new(InverseOfferStatus_Status)
	*p = x
	return p
}
func (x InverseOfferStatus_Status) String() string {
	return proto.EnumName(InverseOfferStatus_Status_name, int32(x))
}
func (x *InverseOfferStatus_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(InverseOfferStatus_Status_value, data, "InverseOfferStatus_Status")
	if err != nil {
		return err
	}
	*x = InverseOfferStatus_Status(value)
	return nil
}
func (InverseOfferStatus_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorAllocator, []int{0, 0}
}

// *
// Describes the status of an inverse offer.
//
// This is a protobuf so as to be able to share the status to inverse offers
// through endpoints such as the maintenance status endpoint.
type InverseOfferStatus struct {
	Status      *InverseOfferStatus_Status `protobuf:"varint,1,req,name=status,enum=mesos.v1.allocator.InverseOfferStatus_Status" json:"status,omitempty"`
	FrameworkId *mesos_v1.FrameworkID      `protobuf:"bytes,2,req,name=framework_id" json:"framework_id,omitempty"`
	// Time, since the epoch, when this status was last updated.
	Timestamp        *mesos_v1.TimeInfo `protobuf:"bytes,3,req,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *InverseOfferStatus) Reset()                    { *m = InverseOfferStatus{} }
func (m *InverseOfferStatus) String() string            { return proto.CompactTextString(m) }
func (*InverseOfferStatus) ProtoMessage()               {}
func (*InverseOfferStatus) Descriptor() ([]byte, []int) { return fileDescriptorAllocator, []int{0} }

func (m *InverseOfferStatus) GetStatus() InverseOfferStatus_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return InverseOfferStatus_UNKNOWN
}

func (m *InverseOfferStatus) GetFrameworkId() *mesos_v1.FrameworkID {
	if m != nil {
		return m.FrameworkId
	}
	return nil
}

func (m *InverseOfferStatus) GetTimestamp() *mesos_v1.TimeInfo {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func init() {
	proto.RegisterType((*InverseOfferStatus)(nil), "mesos.v1.allocator.InverseOfferStatus")
	proto.RegisterEnum("mesos.v1.allocator.InverseOfferStatus_Status", InverseOfferStatus_Status_name, InverseOfferStatus_Status_value)
}
func (m *InverseOfferStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InverseOfferStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllocator(dAtA, i, uint64(*m.Status))
	}
	if m.FrameworkId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAllocator(dAtA, i, uint64(m.FrameworkId.Size()))
		n1, err := m.FrameworkId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Timestamp == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAllocator(dAtA, i, uint64(m.Timestamp.Size()))
		n2, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Allocator(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Allocator(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintAllocator(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *InverseOfferStatus) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		n += 1 + sovAllocator(uint64(*m.Status))
	}
	if m.FrameworkId != nil {
		l = m.FrameworkId.Size()
		n += 1 + l + sovAllocator(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovAllocator(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAllocator(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAllocator(x uint64) (n int) {
	return sovAllocator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InverseOfferStatus) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllocator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InverseOfferStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InverseOfferStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v InverseOfferStatus_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (InverseOfferStatus_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameworkId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllocator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FrameworkId == nil {
				m.FrameworkId = &mesos_v1.FrameworkID{}
			}
			if err := m.FrameworkId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllocator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &mesos_v1.TimeInfo{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipAllocator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllocator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAllocator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAllocator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllocator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllocator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAllocator
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAllocator
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAllocator(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAllocator = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAllocator   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("lib/operator/allocator/allocator.proto", fileDescriptorAllocator) }

var fileDescriptorAllocator = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xdf, 0x4a, 0xc3, 0x30,
	0x18, 0xc5, 0x4d, 0x07, 0x95, 0x65, 0x22, 0x23, 0x20, 0x0c, 0xc1, 0x32, 0x06, 0xca, 0x40, 0x9a,
	0xe2, 0xc0, 0x4b, 0x2f, 0x5c, 0x57, 0xa1, 0x28, 0xdd, 0xc0, 0x89, 0xe0, 0x8d, 0x64, 0x5d, 0xfa,
	0x47, 0x9b, 0x7e, 0x25, 0xc9, 0xe6, 0xab, 0xf8, 0x48, 0x5e, 0x7a, 0xe7, 0xad, 0xd4, 0x17, 0x91,
	0xd6, 0xb9, 0x21, 0xf3, 0xee, 0x90, 0x73, 0xce, 0xef, 0x90, 0x0f, 0x9f, 0x64, 0xe9, 0xcc, 0x81,
	0x82, 0x4b, 0xa6, 0x41, 0x3a, 0x2c, 0xcb, 0x20, 0xfc, 0xab, 0x68, 0x21, 0x41, 0x03, 0x21, 0x82,
	0x2b, 0x50, 0x74, 0x79, 0x46, 0xd7, 0xce, 0xe1, 0x79, 0x9c, 0xea, 0x64, 0x31, 0xa3, 0x21, 0x08,
	0x07, 0xf2, 0xb9, 0xe4, 0x4f, 0xb6, 0x12, 0x90, 0x31, 0xa7, 0xce, 0xda, 0x31, 0xd8, 0x89, 0xd6,
	0x85, 0x53, 0x2d, 0xfc, 0xb4, 0x6b, 0x54, 0xef, 0x03, 0x61, 0xe2, 0xe7, 0x4b, 0x2e, 0x15, 0x1f,
	0x47, 0x11, 0x97, 0xb7, 0x9a, 0xe9, 0x85, 0x22, 0x17, 0xd8, 0x54, 0xb5, 0xea, 0xa0, 0xae, 0xd1,
	0xdf, 0x1f, 0xd8, 0x74, 0x7b, 0x92, 0x6e, 0xf7, 0xe8, 0xaa, 0x7e, 0x8a, 0xf7, 0x22, 0xc9, 0x04,
	0x7f, 0x01, 0xf9, 0xfc, 0x98, 0xce, 0x3b, 0x46, 0xd7, 0xe8, 0xb7, 0x06, 0x07, 0x1b, 0xc8, 0xd5,
	0xaf, 0xeb, 0x8f, 0xc8, 0x31, 0x6e, 0xea, 0x54, 0x70, 0xa5, 0x99, 0x28, 0x3a, 0x8d, 0x3a, 0x49,
	0x36, 0xc9, 0x69, 0x2a, 0xb8, 0x9f, 0x47, 0xd0, 0xa3, 0xd8, 0x5c, 0xd1, 0x5b, 0x78, 0xf7, 0x2e,
	0xb8, 0x0e, 0xc6, 0xf7, 0x41, 0x1b, 0x11, 0x8c, 0xcd, 0x4b, 0xd7, 0xf5, 0x26, 0xd3, 0xb6, 0x51,
	0x19, 0x23, 0xcf, 0xbd, 0xf1, 0x03, 0xaf, 0xdd, 0x18, 0x0e, 0xdf, 0x4a, 0x0b, 0xbd, 0x97, 0x16,
	0xfa, 0x2c, 0x2d, 0xf4, 0xfa, 0x65, 0xed, 0xe0, 0x23, 0x90, 0x31, 0x65, 0x05, 0x0b, 0x13, 0xfe,
	0xcf, 0x77, 0x86, 0xe6, 0xa4, 0xba, 0x88, 0x7a, 0x68, 0xae, 0x9f, 0xbe, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xc5, 0xe8, 0x0d, 0x26, 0x91, 0x01, 0x00, 0x00,
}
